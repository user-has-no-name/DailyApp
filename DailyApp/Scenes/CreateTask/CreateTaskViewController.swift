//
//  CreateTaskViewController.swift
//  DailyApp
//
//  Created by Oleksandr Zavazhenko on 30/01/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit


protocol CreateTaskVCDelegate: AnyObject {
  func reloadData()
}

protocol CreateTaskDisplayLogic: AnyObject {
  func displayCategories(viewModel:  CreateTask.FetchCategories.ViewModel)
}

class CreateTaskViewController: UITableViewController,
                                CreateTaskDisplayLogic {

  weak var delegate: CreateTaskVCDelegate?

  @IBOutlet weak var textField: UITextField!
  @IBOutlet weak var reminder: UISwitch!
  @IBOutlet weak var datePicker: UIDatePicker!
  @IBOutlet weak var categoryPicker: UIPickerView!
  @IBOutlet weak var editButton: UIButton!

  @IBAction func cancelButtonClicked(_ sender: UIButton) {
    _ = navigationController?.popViewController(animated: true)
  }

  @IBAction func setReminderClicked(_ sender: UISwitch) {

    if sender.isOn {
      UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { success, error in
        if success {
          //
        } else if let error = error {
          print(error)
        }
      }
    }

  }

  @IBAction func addCategoryButton(_ sender: UIButton) {

    showAlert()

  }



  func configMenuForEditButton() {

    let editCategory = UIAction(title: "Edit",
                                image: UIImage(systemName: "square.and.pencil")) { (action) in

      // show alert with a text that should be edited

    }

    let deleteCategory = UIAction(title: "Delete",
                                  image: UIImage(systemName: "trash")) { (action) in

      let indexOfSelectedCategory = self.categoryPicker.selectedRow(inComponent: 0)

      DispatchQueue.main.async {
        self.showDeleteWarning(for: indexOfSelectedCategory)
      }
    }

    let menu = UIMenu(options: .displayInline,
                      children: [editCategory, deleteCategory])

    editButton.showsMenuAsPrimaryAction = true
    editButton.menu = menu

  }

  func showDeleteWarning(for index: Int) {
        //Create the alert controller and actions
        let alert = UIAlertController(title: "Warning", message: "Are you sure, you want to remove this category? This action will delete all tasks included in this category!", preferredStyle: .alert)

        let cancelAction = UIAlertAction(title: "Cancel", style: .cancel, handler: nil)

        let deleteAction = UIAlertAction(title: "Delete", style: .destructive) { _ in
            DispatchQueue.main.async {
              self.deleteCategory(at: index)
              self.fetchCategories()
              self.categoryPicker.reloadAllComponents()
            }
        }

        //Add the actions to the alert controller
        alert.addAction(cancelAction)
        alert.addAction(deleteAction)

        //Present the alert controller
        present(alert, animated: true, completion: nil)
    }

  func setReminder() {

    let notificationContent = UNMutableNotificationContent()

    if let title = textField.text {

      notificationContent.title = "You have the task to do!"
      notificationContent.sound = .default
      notificationContent.body = title

    }

    let targetDate = datePicker.date

    let trigger = UNCalendarNotificationTrigger(dateMatching: Calendar.current.dateComponents([.year, .month, .day, .hour, .minute,
                                                                                               .second],
                                                                                              from: targetDate),
                                                repeats: false)

    let request = UNNotificationRequest(identifier: "some_long_id", content: notificationContent, trigger: trigger)

    UNUserNotificationCenter.current().add(request) { error in
      if let error = error {
        print(error)
      }
    }

  }

  @IBAction func saveTaskButton(_ sender: Any) {

    if reminder.isOn {
      DispatchQueue.main.async {
        self.setReminder()
      }
    }

    createTask()

    delegate?.reloadData()

    let alert = UIAlertController(title: "", message: "Task successfuly added", preferredStyle: .alert)
    self.present(alert, animated: true, completion: nil)

    // change to desired number of seconds (in this case 5 seconds)
    let when = DispatchTime.now() + 1

    DispatchQueue.main.asyncAfter(deadline: when) {
      // your code with delay
      alert.dismiss(animated: true, completion: nil)
      _ = self.navigationController?.popViewController(animated: true)
    }


  }

  func showAlert() {

    let alert = UIAlertController(title: "Add a category",
                                  message: nil,
                                  preferredStyle: .alert)

    alert.addTextField { textField in
      textField.placeholder = "Category Title"
    }

    alert.addTextField { textField in
      textField.placeholder = "Emoji for category"
    }

    let submitButton = UIAlertAction(title: "Add",
                                     style: .default) { (action) in

      let titleLabel = alert.textFields![0]
      let categoryEmoji = alert.textFields![1]

      let newCategory = CreateTask.CategoryFormFields(title: titleLabel.text ?? "New category",
                                                      label: categoryEmoji.text ?? "")

      let request = CreateTask.CreateCategory.Request(categoryFromFields: newCategory)

      self.createCategory(request: request)
      self.fetchCategories()
      self.categoryPicker.reloadAllComponents()

    }

    let cancelButton = UIAlertAction(title: "Cancel",
                                     style: .cancel,
                                     handler: nil)


    alert.addAction(submitButton)
    alert.addAction(cancelButton)

    self.present(alert, animated: true, completion: nil)

  }

  var interactor: CreateTaskBusinessLogic?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup

  var displayedCategories: [CreateTask.FetchCategories.ViewModel.DisplayedCategories] = []
  var categories: [Category] = []
  
  private func setup() {
    let viewController = self
    let interactor = CreateTaskInteractor()
    let presenter = CreateTaskPresenter()
    viewController.interactor = interactor
    interactor.presenter = presenter
    presenter.viewController = viewController
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {

    super.viewDidLoad()
    fetchCategories()
    categoryPicker.delegate = self
    categoryPicker.dataSource = self

    configMenuForEditButton()
    configUI()

    self.navigationItem.setHidesBackButton(true, animated: true)
  }

    func configUI() {

      categoryPicker.dataSource = self
      categoryPicker.delegate = self

      textField.delegate = self
      textField.returnKeyType = .done

    }
  
  // MARK: Do something

  func createTask() {

    let title = textField.text
    let date = datePicker.date
    let indexOfSelectedCategory = categoryPicker.selectedRow(inComponent: 0)
    let category = categories[indexOfSelectedCategory]

    let task = CreateTask.TaskFormFields(title: title ?? "New Task",
                                         category: category,
                                         date: date)

    let request = CreateTask.CreateTask.Request(taskFormFields: task)

    interactor?.createTask(request: request)

  }

  func createCategory(request: CreateTask.CreateCategory.Request) {

    interactor?.createCategory(request: request)

  }

  func fetchCategories() {
    let request = CreateTask.FetchCategories.Request()

    interactor?.fetchCategories(request: request)
  }

  func deleteCategory(at index: Int) {

    let request = CreateTask.DeleteCategory.Request(categoryToDelete: categories[index])

    interactor?.deleteCategory(request: request)
  }

  func displayCategories(viewModel: CreateTask.FetchCategories.ViewModel) {

    displayedCategories = viewModel.displayedCategories
    categories = viewModel.categories

    categoryPicker.reloadAllComponents()
  }
}


extension CreateTaskViewController: UIPickerViewDelegate,
                                    UIPickerViewDataSource {

  func numberOfComponents(in pickerView: UIPickerView) -> Int {
    return 1
  }

  func pickerView(_ pickerView: UIPickerView,
                  numberOfRowsInComponent component: Int) -> Int {


    return displayedCategories.count
  }

  func pickerView(_ pickerView: UIPickerView,
                  titleForRow row: Int,
                  forComponent component: Int) -> String? {

    return displayedCategories[row].title

  }

}

extension CreateTaskViewController: UITextFieldDelegate {

  func textFieldShouldReturn(_ textField: UITextField) -> Bool {

    textField.endEditing(true)
    return false

  }
}
