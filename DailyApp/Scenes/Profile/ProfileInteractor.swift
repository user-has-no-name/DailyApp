//
//  ProfileInteractor.swift
//  DailyApp
//
//  Created by Oleksandr Zavazhenko on 01/02/2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfileBusinessLogic {
  func fetchUsername(request: UserInfo.FetchUsername.Request)
  func fetchUserPick(request: UserInfo.FetchUserPick.Request)
  func changeUserPick(request: UserInfo.ChangeUserPick.Request)
  func fetchUserStats(request: UserInfo.FetchStats.Request)
  func changeUsername(request: UserInfo.ChangeUsername.Request)
  func checkDarkMode(request: UserInfo.CheckDarkMode.Request)
  func changeDarkMode(request: UserInfo.ChangeDarkMode.Request)
}

protocol ProfileDataStore {
  //var name: String { get set }
}

class ProfileInteractor: ProfileBusinessLogic, ProfileDataStore {

  var presenter: ProfilePresentationLogic?
  var userDefaultsWorker: UserDefaultsWorker?
  var fileManagerWorker: FileManagerWorker?
  var taskWorker: TaskWorker?
  //var name: String = ""
  
  // MARK: Do something

  func fetchUsername(request: UserInfo.FetchUsername.Request) {

    userDefaultsWorker = UserDefaultsWorker()

    let username = userDefaultsWorker?.fetchUsername(using: request.userDefaultsKey)

    let response = UserInfo.FetchUsername.Response(username: username ?? "User")

    presenter?.presentUserName(response: response)

  }

  func fetchUserStats(request: UserInfo.FetchStats.Request) {

    taskWorker = TaskWorker()

    let numberOfAllTasks = taskWorker?.getInfoAboutAllTasks()
    let numberOfCompletedTasks = taskWorker?.getInfoAboutCompletedTasks()
    let numberOfActiveTasks = taskWorker?.getInfoAboutAllActiveTasks()
    let percentage = taskWorker?.calculatePercentage()


    let response = UserInfo.FetchStats.Response(numberOfAllTasks: numberOfAllTasks ?? 0,
                                                numberOfCompletedTasks: numberOfCompletedTasks ?? 0,
                                                numberOfActiveTasks: numberOfActiveTasks ?? 0,
                                                percentage: percentage ?? 0.0)

    presenter?.presentUserStats(response: response)
  }

  func changeUsername(request: UserInfo.ChangeUsername.Request) {

    userDefaultsWorker = UserDefaultsWorker()

    let newUsername = request.newUserName

    userDefaultsWorker?.changeUsername(newUsername: newUsername, using: request.userDefaultsKey)

  }

  func checkDarkMode(request: UserInfo.CheckDarkMode.Request) {

    userDefaultsWorker = UserDefaultsWorker()

    var isOn = false

    if let bool = userDefaultsWorker?.checkDarkMode(using: request.userDefaultsKey) {
      isOn = bool
    }

    let response = UserInfo.CheckDarkMode.Response(isOn: isOn)

    presenter?.presentConfigurationOfDarkModeSwitcher(response: response)

  }

  func changeDarkMode(request: UserInfo.ChangeDarkMode.Request) {

    userDefaultsWorker = UserDefaultsWorker()

    userDefaultsWorker?.changeDarkMode(using: request.userDefaultsKey)

  }

  func fetchUserPick(request: UserInfo.FetchUserPick.Request) {

    fileManagerWorker = FileManagerWorker()

    let imageName = fileManagerWorker?.fetchImage(fileName: request.fileName)

    if let imageName = imageName {
      let response = UserInfo.FetchUserPick.Response(imageName: imageName)

      presenter?.presentUserPick(response: response)
    }

  }

  func changeUserPick(request: UserInfo.ChangeUserPick.Request) {

    fileManagerWorker = FileManagerWorker()

    let image = request.image

    fileManagerWorker?.saveImage(image: image)

  }


}
